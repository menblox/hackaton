from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.screenmanager import ScreenManager, Screen, SlideTransition
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.core.window import Window
from kivy.clock import Clock
from kivy.uix.image import Image
from kivy.graphics import Color, Rectangle, RoundedRectangle
from kivy.utils import get_color_from_hex
import json
import os
from datetime import datetime
import asyncio
import threading
from bleak import BleakScanner, BleakClient

# Improved color scheme with better contrast
COLORS = {
    'primary': get_color_from_hex('#2E86AB'),
    'secondary': get_color_from_hex('#A23B72'),
    'accent': get_color_from_hex('#F18F01'),
    'success': get_color_from_hex('#4CAF50'),
    'danger': get_color_from_hex('#F44336'),
    'light': get_color_from_hex('#F8F9FA'),
    'dark': get_color_from_hex('#212529'),
    'gray': get_color_from_hex('#B0BEC5'),
    'white': get_color_from_hex('#FFFFFF'),
    'card_bg': get_color_from_hex('#FFFFFF'),
    'text_primary': get_color_from_hex('#212529'),
    'text_secondary': get_color_from_hex('#546E7A'),
    'button_start': get_color_from_hex('#F18F01'),
}

# BLE Configuration
TARGET_MAC_ADDRESS = "B0:B2:1C:A7:E2:9A"
CHARACTERISTIC_UUID = "beb5483e-36e1-4688-b7f5-ea07361b26a8"

class BLESensorManager:
    def __init__(self):
        self.client = None
        self.is_connected = False
        self.is_connecting = False
        self.current_value = 0
        self.loop = None
        self.thread = None
        self.is_reading = False
        
        # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.baseline = 0
        self.max_value = 0
        self.is_calibrated = False
        self.is_calibrating = False
        self.calibration_phase = None  # 'relax' –∏–ª–∏ 'tension'
        self.calibration_data_relax = []
        self.calibration_data_tension = []
        self.calibration_callback = None
        self.calibration_phase_callback = None
        
    def start_ble_loop(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: Start BLE in a separate thread"""
        if self.loop is None:
            self.loop = asyncio.new_event_loop()
            self.thread = threading.Thread(target=self._run_ble_loop, daemon=True)
            self.thread.start()
            
            # Start automatic connection
            asyncio.run_coroutine_threadsafe(self._auto_connect(), self.loop)
    
    def _run_ble_loop(self):
        """Run the asyncio event loop"""
        asyncio.set_event_loop(self.loop)
        try:
            self.loop.run_forever()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ BLE loop: {e}")
    
    async def _auto_connect(self):
        """–ü–ï–†–ï–ü–ò–°–ê–ù: –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ MAC –±–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–∞—Ç—á–∏–∫—É –ø–æ MAC: {TARGET_MAC_ADDRESS}")
        self.is_connecting = True
        
        connection_attempts = 0
        max_attempts = 20
        
        while not self.is_connected and connection_attempts < max_attempts:
            connection_attempts += 1
            print(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {connection_attempts}/{max_attempts}")
            
            try:
                # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ MAC-–∞–¥—Ä–µ—Å—É –±–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                print(f"üì° –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {TARGET_MAC_ADDRESS}...")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã MAC-–∞–¥—Ä–µ—Å–∞
                mac_variants = [
                    TARGET_MAC_ADDRESS,
                    TARGET_MAC_ADDRESS.upper(),
                    TARGET_MAC_ADDRESS.lower(),
                    TARGET_MAC_ADDRESS.replace(':', '-'),
                    TARGET_MAC_ADDRESS.replace('-', ':')
                ]
                
                for mac in mac_variants:
                    try:
                        print(f"üîß –ü—Ä–æ–±—É–µ–º MAC: {mac}")
                        self.client = BleakClient(mac)
                        
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        await self.client.connect(timeout=30.0)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                        if self.client.is_connected:
                            self.is_connected = True
                            self.is_connecting = False
                            print(f"üéâ –£–°–ü–ï–®–ù–û –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –¥–∞—Ç—á–∏–∫—É! MAC: {mac}")
                            
                            # –ü–ª–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –Ω–æ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–º–µ—Ä –¥–æ –∫–æ–º–∞–Ω–¥—ã
                            self.is_reading = False
                            print("üì¥ –ü–ª–∞—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è - –∑–∞–º–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                            
                            return
                        else:
                            print(f"‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è MAC: {mac}")
                            await self.client.disconnect()
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {mac}: {e}")
                        continue
                
                print("üîÑ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã MAC-–∞–¥—Ä–µ—Å–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
                    
            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                print("üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
        
        if not self.is_connected:
            self.is_connecting = False
            print(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    
    async def _read_sensor_data(self):
        """Read data from BLE sensor with zero value filtering"""
        if not self.client or not self.is_connected or not self.is_reading:
            return
        
        try:
            data = await self.client.read_gatt_char(CHARACTERISTIC_UUID)
            sensor_value = data.decode('utf-8').strip()
            
            # Convert to integer and filter zero values
            try:
                value = float(sensor_value)
                if value != 0:  # Accept only non-zero values
                    self.current_value = value
                    
                    # –ï—Å–ª–∏ –∏–¥–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞, —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤
                    if self.is_calibrating:
                        if self.calibration_phase == 'relax':
                            self.calibration_data_relax.append(value)
                        elif self.calibration_phase == 'tension':
                            self.calibration_data_tension.append(value)
                        
            except ValueError:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {sensor_value}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞: {e}")
            self.is_connected = False
    
    def read_sensor_data(self):
        """Read sensor data from main thread"""
        if self.loop and self.is_connected and self.is_reading:
            asyncio.run_coroutine_threadsafe(self._read_sensor_data(), self.loop)
    
    def start_reading(self):
        """Start reading data from sensor - –¢–û–õ–¨–ö–û –ü–û –ö–û–ú–ê–ù–î–ï –° –ö–ù–û–ü–ö–ò –°–¢–ê–†–¢"""
        self.is_reading = True
        print("üìä –ù–ê–ß–ê–¢ –ó–ê–ú–ï–† –î–ê–ù–ù–´–• –° –î–ê–¢–ß–ò–ö–ê (–∫–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢)")
    
    def stop_reading(self):
        """Stop reading data from sensor"""
        self.is_reading = False
        print("‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–∞")
    
    def start_calibration(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"""
        if self.is_connected and not self.is_calibrating:
            self.is_calibrating = True
            self.calibration_data_relax = []
            self.calibration_data_tension = []
            self.is_reading = True  # –í–∫–ª—é—á–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            print("üîß –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            async def calibration_process():
                # –§–∞–∑–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è - 15 —Å–µ–∫—É–Ω–¥
                self.calibration_phase = 'relax'
                print("üéØ –§–∞–∑–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è: 15 —Å–µ–∫—É–Ω–¥")
                if self.calibration_phase_callback:
                    self.calibration_phase_callback('relax', 15)
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è
                relax_start = asyncio.get_event_loop().time()
                while (asyncio.get_event_loop().time() - relax_start) < 15:
                    await asyncio.sleep(0.1)
                
                # –§–∞–∑–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è - 15 —Å–µ–∫—É–Ω–¥
                self.calibration_phase = 'tension'
                print("üí™ –§–∞–∑–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è: 15 —Å–µ–∫—É–Ω–¥")
                if self.calibration_phase_callback:
                    self.calibration_phase_callback('tension', 15)
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
                tension_start = asyncio.get_event_loop().time()
                while (asyncio.get_event_loop().time() - tension_start) < 15:
                    await asyncio.sleep(0.1)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                self.is_reading = False
                self.is_calibrating = False
                self.calibration_phase = None
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if self.calibration_data_relax and self.calibration_data_tension:
                    # –î–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.baseline = min(self.calibration_data_relax)
                    # –î–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.max_value = max(self.calibration_data_tension)
                    self.is_calibrated = True
                    
                    print(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    print(f"   –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ): {self.baseline:.2f}")
                    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {self.max_value:.2f}")
                    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {self.max_value - self.baseline:.2f}")
                    print(f"   –î–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–∑–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è: {len(self.calibration_data_relax)}")
                    print(f"   –î–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–∑–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è: {len(self.calibration_data_tension)}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    if self.calibration_callback:
                        self.calibration_callback(self.baseline, self.max_value)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            asyncio.run_coroutine_threadsafe(calibration_process(), self.loop)
    
    def get_calibrated_value(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0-100%)"""
        if not self.is_calibrated or self.max_value == self.baseline:
            return self.current_value
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100%
        normalized = (self.current_value - self.baseline) / (self.max_value - self.baseline) * 100
        return max(0, min(100, normalized))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100%
    
    def set_calibration_callback(self, callback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.calibration_callback = callback
    
    def set_calibration_phase_callback(self, callback):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.calibration_phase_callback = callback
    
    def disconnect_sensor(self):
        """Disconnect from sensor (only when app closes)"""
        if self.loop and self.client and self.is_connected:
            async def disconnect():
                try:
                    await self.client.disconnect()
                    self.is_connected = False
                    self.is_reading = False
                    print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –¥–∞—Ç—á–∏–∫–∞")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            asyncio.run_coroutine_threadsafe(disconnect(), self.loop)

# Global sensor manager
sensor_manager = BLESensorManager()

class RoundedButton(Button):
    def __init__(self, **kwargs):
        super(RoundedButton, self).__init__(**kwargs)
        self.background_color = (0, 0, 0, 0)
        self.background_normal = ''
        with self.canvas.before:
            self.bg_color = Color(*COLORS['primary'])
            self.rect = RoundedRectangle(
                pos=self.pos, 
                size=self.size,
                radius=[15]
            )
        self.bind(pos=self.update_rect, size=self.update_rect)
    
    def update_rect(self, *args):
        self.rect.pos = self.pos
        self.rect.size = self.size

class CardLayout(BoxLayout):
    def __init__(self, **kwargs):
        super(CardLayout, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.size_hint_y = None
        self.padding = [15, 15, 15, 15]
        self.spacing = 10
        
        with self.canvas.before:
            Color(*COLORS['card_bg'])
            self.bg_rect = RoundedRectangle(
                pos=self.pos, 
                size=self.size,
                radius=[12]
            )
            Color(*COLORS['gray'])
            self.border_rect = RoundedRectangle(
                pos=(self.pos[0]-1, self.pos[1]-1), 
                size=(self.size[0]+2, self.size[1]+2),
                radius=[13]
            )
        
        self.bind(pos=self.update_graphics, size=self.update_graphics)
    
    def update_graphics(self, *args):
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size
        self.border_rect.pos = (self.pos[0]-1, self.pos[1]-1)
        self.border_rect.size = (self.size[0]+2, self.size[1]+2)

class MainScreen(Screen):
    def __init__(self, **kwargs):
        super(MainScreen, self).__init__(**kwargs)
        Window.clearcolor = COLORS['light']
        
        layout = FloatLayout()
        
        # Background gradient
        with layout.canvas.before:
            Color(*COLORS['primary'])
            Rectangle(pos=(0, 0), size=Window.size)
            Color(*get_color_from_hex('#1A5276'))
            Rectangle(pos=(0, Window.size[1] * 0.4), size=(Window.size[0], Window.size[1] * 0.6))
        
        # Title
        title_label = Label(
            text='Fitness Tracker',
            font_size='42sp',
            color=COLORS['white'],
            bold=True,
            size_hint=(0.8, None),
            height=60,
            pos_hint={'top': 0.85, 'center_x': 0.5},
            text_size=(Window.size[0] * 0.8, None)
        )
        title_label.bind(texture_size=title_label.setter('size'))
        layout.add_widget(title_label)
        
        subtitle_label = Label(
            text='–î–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π',
            font_size='20sp',
            color=COLORS['white'],
            size_hint=(0.8, None),
            height=30,
            pos_hint={'top': 0.75, 'center_x': 0.5},
            text_size=(Window.size[0] * 0.8, None)
        )
        subtitle_label.bind(texture_size=subtitle_label.setter('size'))
        layout.add_widget(subtitle_label)
        
        # Connection status
        self.status_label = Label(
            text='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É...',
            font_size='16sp',
            color=COLORS['white'],
            size_hint=(0.8, None),
            height=40,
            pos_hint={'center_x': 0.5, 'center_y': 0.25},
            text_size=(Window.size[0] * 0.8, None)
        )
        layout.add_widget(self.status_label)
        
        # Start button with contrast color
        self.start_button = RoundedButton(
            text='–ù–ê–ß–ê–¢–¨',
            font_size='24sp',
            size_hint=(0.6, 0.12),
            pos_hint={'center_x': 0.5, 'center_y': 0.4},
            color=COLORS['white']
        )
        self.start_button.bg_color.rgba = COLORS['button_start']
        self.start_button.bind(on_press=self.switch_to_workout_menu)
        layout.add_widget(self.start_button)
        
        self.add_widget(layout)
        
        # Start checking connection status
        Clock.schedule_interval(self.update_connection_status, 1.0)

    def update_connection_status(self, dt):
        """Update connection status display"""
        if sensor_manager.is_connected:
            self.status_label.text = '‚úÖ –î–∞—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è)'
            self.start_button.disabled = False
        elif sensor_manager.is_connecting:
            self.status_label.text = 'üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫—É...'
            self.start_button.disabled = True
        else:
            self.status_label.text = '‚ùå –î–∞—Ç—á–∏–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
            self.start_button.disabled = True

    def switch_to_workout_menu(self, instance):
        if sensor_manager.is_connected:
            self.manager.current = 'workout_menu'

class WorkoutMenuScreen(Screen):
    def __init__(self, **kwargs):
        super(WorkoutMenuScreen, self).__init__(**kwargs)
        Window.clearcolor = COLORS['light']
        
        layout = FloatLayout()
        
        # Background
        with layout.canvas.before:
            Color(*COLORS['light'])
            Rectangle(pos=(0, 0), size=Window.size)
        
        # Title
        title_label = Label(
            text='–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            font_size='32sp',
            color=COLORS['text_primary'],
            bold=True,
            size_hint=(0.8, None),
            height=50,
            pos_hint={'top': 0.9, 'center_x': 0.5},
            text_size=(Window.size[0] * 0.8, None)
        )
        title_label.bind(texture_size=title_label.setter('text_size'))
        layout.add_widget(title_label)
        
        # Menu cards layout
        menu_layout = BoxLayout(
            orientation='vertical',
            spacing=20,
            size_hint=(0.8, 0.6),
            pos_hint={'center_x': 0.5, 'center_y': 0.5}
        )
        
        # History card
        history_card = CardLayout(height=120)
        history_content = BoxLayout(orientation='horizontal', spacing=15)
        
        # History icon area (empty now)
        history_icon = BoxLayout(size_hint_x=0.3)
        
        history_text = BoxLayout(orientation='vertical')
        history_title = Label(
            text='–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            font_size='20sp',
            color=COLORS['text_primary'],
            bold=True,
            halign='left'
        )
        history_title.bind(size=history_title.setter('text_size'))
        
        history_desc = Label(
            text='–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            font_size='14sp',
            color=COLORS['text_secondary'],
            halign='left'
        )
        history_desc.bind(size=history_desc.setter('text_size'))
        
        history_text.add_widget(history_title)
        history_text.add_widget(history_desc)
        
        history_content.add_widget(history_icon)
        history_content.add_widget(history_text)
        
        history_card.add_widget(history_content)
        
        # Make the entire card clickable
        history_card.bind(on_touch_down=lambda instance, touch: 
                         instance.collide_point(*touch.pos) and self.switch_to_history(instance))
        
        # Workout card
        workout_card = CardLayout(height=120)
        workout_content = BoxLayout(orientation='horizontal', spacing=15)
        
        # Workout icon area (empty now)
        workout_icon = BoxLayout(size_hint_x=0.3)
        
        workout_text = BoxLayout(orientation='vertical')
        workout_title = Label(
            text='–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
            font_size='20sp',
            color=COLORS['text_primary'],
            bold=True,
            halign='left'
        )
        workout_title.bind(size=workout_title.setter('text_size'))
        
        workout_desc = Label(
            text='–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º',
            font_size='14sp',
            color=COLORS['text_secondary'],
            halign='left'
        )
        workout_desc.bind(size=workout_desc.setter('text_size'))
        
        workout_text.add_widget(workout_title)
        workout_text.add_widget(workout_desc)
        
        workout_content.add_widget(workout_icon)
        workout_content.add_widget(workout_text)
        
        workout_card.add_widget(workout_content)
        
        # Make the entire card clickable
        workout_card.bind(on_touch_down=lambda instance, touch: 
                         instance.collide_point(*touch.pos) and self.switch_to_workouts(instance))
        
        menu_layout.add_widget(history_card)
        menu_layout.add_widget(workout_card)
        layout.add_widget(menu_layout)
        
        # Back button
        back_button = RoundedButton(
            text='–ù–∞–∑–∞–¥',
            font_size='18sp',
            size_hint=(0.4, 0.08),
            pos_hint={'center_x': 0.5, 'y': 0.05},
            color=COLORS['white']
        )
        back_button.bg_color.rgba = COLORS['secondary']
        back_button.bind(on_press=self.switch_to_main)
        layout.add_widget(back_button)
        
        self.add_widget(layout)

    def switch_to_history(self, instance):
        self.manager.current = 'history'

    def switch_to_workouts(self, instance):
        self.manager.current = 'workouts'

    def switch_to_main(self, instance):
        self.manager.current = 'main'

class HistoryScreen(Screen):
    def __init__(self, **kwargs):
        super(HistoryScreen, self).__init__(**kwargs)
        Window.clearcolor = COLORS['light']
        
        main_layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        # Title
        title = Label(
            text='–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            font_size='28sp',
            color=COLORS['text_primary'],
            bold=True,
            size_hint_y=0.1
        )
        main_layout.add_widget(title)
        
        # Workouts area
        scroll_view = ScrollView(
            size_hint=(1, 0.75),
            do_scroll_x=False,
            do_scroll_y=True,
            bar_width=10,
            bar_color=COLORS['primary']
        )
        self.history_layout = BoxLayout(
            orientation='vertical',
            spacing=15, 
            size_hint_y=None,
            padding=10
        )
        self.history_layout.bind(minimum_height=self.history_layout.setter('height'))
        scroll_view.add_widget(self.history_layout)
        main_layout.add_widget(scroll_view)
        
        # Buttons
        buttons_layout = BoxLayout(size_hint_y=0.15, spacing=15, padding=10)
        
        clear_btn = RoundedButton(
            text='–û–ß–ò–°–¢–ò–¢–¨ –ò–°–¢–û–†–ò–Æ',
            font_size='16sp',
            color=COLORS['white']
        )
        clear_btn.bg_color.rgba = COLORS['danger']
        clear_btn.bind(on_press=self.clear_history)
        
        back_btn = RoundedButton(
            text='–ù–ê–ó–ê–î',
            font_size='16sp',
            color=COLORS['white']
        )
        back_btn.bg_color.rgba = COLORS['secondary']
        back_btn.bind(on_press=self.switch_to_workout_menu)
        
        buttons_layout.add_widget(clear_btn)
        buttons_layout.add_widget(back_btn)
        main_layout.add_widget(buttons_layout)
        
        self.add_widget(main_layout)
        
        Clock.schedule_once(lambda dt: self.update_history(), 0.1)

    def update_history(self):
        self.history_layout.clear_widgets()
        self.history_layout.height = 0
        
        try:
            db_file = 'workout_database.json'
            if os.path.exists(db_file):
                with open(db_file, 'r', encoding='utf-8') as f:
                    database = json.load(f)
                
                workouts = database.get("workouts", [])
                
                if workouts:
                    workouts.sort(key=lambda x: x.get('date', ''), reverse=True)
                    
                    for workout in workouts:
                        workout_card = self.create_workout_card(workout)
                        self.history_layout.add_widget(workout_card)
                    
                    self.history_layout.height = self.history_layout.minimum_height
                else:
                    no_workouts_label = Label(
                        text='–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–µ,\n—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å –∏—Å—Ç–æ—Ä–∏—é',
                        font_size='18sp',
                        size_hint_y=None,
                        height=200,
                        halign='center',
                        valign='middle',
                        color=COLORS['text_secondary']
                    )
                    no_workouts_label.bind(size=no_workouts_label.setter('text_size'))
                    self.history_layout.add_widget(no_workouts_label)
            else:
                no_db_label = Label(
                    text='–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É,\n—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                    font_size='18sp',
                    size_hint_y=None,
                    height=200,
                    halign='center',
                    valign='middle',
                    color=COLORS['text_secondary']
                )
                no_db_label.bind(size=no_db_label.setter('text_size'))
                self.history_layout.add_widget(no_db_label)
                
        except Exception as e:
            error_label = Label(
                text=f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}',
                font_size='16sp',
                size_hint_y=None,
                height=120,
                halign='center',
                valign='middle',
                color=COLORS['danger']
            )
            error_label.bind(size=error_label.setter('text_size'))
            self.history_layout.add_widget(error_label)

    def create_workout_card(self, workout):
        card = CardLayout(height=180)
        
        content = BoxLayout(orientation='vertical', spacing=8)
        
        # Header with date and time
        header_layout = BoxLayout(orientation='horizontal', size_hint_y=0.4)
        
        date_parts = workout.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').split(' ')
        date_text = date_parts[0] if len(date_parts) > 0 else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        date_label = Label(
            text=f"–î–∞—Ç–∞: {date_text}",
            font_size='16sp',
            color=COLORS['primary'],
            bold=True,
            halign='left',
            text_size=(Window.size[0] * 0.35, None)
        )
        date_label.bind(texture_size=date_label.setter('size'))
        
        duration_label = Label(
            text=f"–í—Ä–µ–º—è: {workout.get('time', '00:00')}",
            font_size='14sp',
            color=COLORS['secondary'],
            halign='right',
            text_size=(Window.size[0] * 0.35, None)
        )
        duration_label.bind(texture_size=duration_label.setter('size'))
        
        header_layout.add_widget(date_label)
        header_layout.add_widget(duration_label)
        
        # Metrics - only muscle tension metrics
        metrics = workout.get('metrics', {})
        metrics_layout = GridLayout(cols=3, size_hint_y=0.6, spacing=10, padding=[0, 10, 0, 0])
        
        metrics_data = [
            ('–ú–∞–∫—Å. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', f"{metrics.get('max_tension', 0):.0f}"),
            ('–°—Ä. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', f"{metrics.get('avg_tension', 0):.0f}"),
            ('–ú–∏–Ω. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', f"{metrics.get('min_tension', 0):.0f}")
        ]
        
        for name, value in metrics_data:
            metric_layout = BoxLayout(orientation='vertical', spacing=2)
            
            metric_name = Label(
                text=name,
                font_size='11sp',
                color=COLORS['text_secondary'],
                size_hint_y=0.4,
                text_size=(None, None)
            )
            metric_name.bind(texture_size=metric_name.setter('size'))
            
            metric_value = Label(
                text=value,
                font_size='16sp',
                color=COLORS['text_primary'],
                bold=True,
                size_hint_y=0.6,
                text_size=(None, None)
            )
            metric_value.bind(texture_size=metric_value.setter('size'))
            
            metric_layout.add_widget(metric_name)
            metric_layout.add_widget(metric_value)
            metrics_layout.add_widget(metric_layout)
        
        content.add_widget(header_layout)
        content.add_widget(metrics_layout)
        
        card.add_widget(content)
        
        # Detail view button
        card.bind(on_touch_down=lambda instance, touch: 
                 instance.collide_point(*touch.pos) and self.show_workout_details(workout))
        
        return card

    def show_workout_details(self, workout):
        if hasattr(self.manager, 'get_screen'):
            detail_screen = self.manager.get_screen('workout_detail')
            detail_screen.load_workout_data(workout)
            self.manager.transition = SlideTransition(direction='left')
            self.manager.current = 'workout_detail'

    def clear_history(self, instance):
        try:
            db_file = 'workout_database.json'
            if os.path.exists(db_file):
                backup_file = f"workout_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                with open(db_file, 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, indent=2, ensure_ascii=False)
                
                empty_db = {"workouts": [], "statistics": {}}
                with open(db_file, 'w', encoding='utf-8') as f:
                    json.dump(empty_db, f, indent=2, ensure_ascii=False)
                
                print(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
                self.update_history()
            else:
                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def switch_to_workout_menu(self, instance):
        self.manager.current = 'workout_menu'

    def on_enter(self):
        self.update_history()

class WorkoutScreen(Screen):
    def __init__(self, **kwargs):
        super(WorkoutScreen, self).__init__(**kwargs)
        Window.clearcolor = COLORS['light']
        self.time_elapsed = 0
        self.timer_running = False
        self.timer_event = None
        self.timer_label = None
        self.sensor_data = []
        self.sensor_update_event = None
        self.calibration_progress = 0
        self.calibration_event = None
        self.calibration_phase_time_left = 0
        self.calibration_phase_event = None

        main_layout = BoxLayout(orientation='vertical', padding=25, spacing=25)
        
        # Title
        title_label = Label(
            text='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
            font_size='32sp',
            color=COLORS['text_primary'],
            bold=True,
            size_hint_y=0.15
        )
        main_layout.add_widget(title_label)
        
        # Timer
        timer_card = CardLayout(height=150)
        timer_content = BoxLayout(orientation='vertical', spacing=10)
        
        timer_title = Label(
            text='–í–†–ï–ú–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò',
            font_size='16sp',
            color=COLORS['text_secondary'],
            bold=True
        )
        
        self.timer_label = Label(
            text='00:00',
            font_size='48sp',
            color=COLORS['primary'],
            bold=True
        )
        
        timer_content.add_widget(timer_title)
        timer_content.add_widget(self.timer_label)
        timer_card.add_widget(timer_content)
        main_layout.add_widget(timer_card)
        
        # Sensor data
        sensor_card = CardLayout(height=100)
        self.sensor_label = Label(
            text='–î–∞—Ç—á–∏–∫: –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è)',
            font_size='18sp',
            color=COLORS['text_primary']
        )
        sensor_card.add_widget(self.sensor_label)
        main_layout.add_widget(sensor_card)
        
        # Calibration info
        self.calibration_card = CardLayout(height=80)
        self.calibration_label = Label(
            text='–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            font_size='16sp',
            color=COLORS['text_secondary']
        )
        self.calibration_card.add_widget(self.calibration_label)
        main_layout.add_widget(self.calibration_card)
        
        # Control buttons
        control_layout = GridLayout(cols=2, spacing=15, size_hint_y=0.25)
        
        start_button = RoundedButton(
            text='–°–¢–ê–†–¢',
            font_size='20sp',
            color=COLORS['white']
        )
        start_button.bind(on_press=self.start_workout)
        
        stop_button = RoundedButton(
            text='–°–¢–û–ü',
            font_size='20sp',
            color=COLORS['white']
        )
        stop_button.bg_color.rgba = COLORS['danger']
        stop_button.bind(on_press=self.stop_workout)
        
        control_layout.add_widget(start_button)
        control_layout.add_widget(stop_button)
        main_layout.add_widget(control_layout)
        
        # Calibration button
        self.calibrate_button = RoundedButton(
            text='–ö–ê–õ–ò–ë–†–û–í–ö–ê (30 —Å–µ–∫)',
            font_size='18sp',
            size_hint_y=0.1,
            color=COLORS['white']
        )
        self.calibrate_button.bg_color.rgba = COLORS['accent']
        self.calibrate_button.bind(on_press=self.start_calibration)
        main_layout.add_widget(self.calibrate_button)
        
        # Save button
        save_button = RoundedButton(
            text='–°–û–•–†–ê–ù–ò–¢–¨ –¢–†–ï–ù–ò–†–û–í–ö–£',
            font_size='20sp',
            size_hint_y=0.12,
            color=COLORS['white']
        )
        save_button.bg_color.rgba = COLORS['success']
        save_button.bind(on_press=self.save_workout)
        main_layout.add_widget(save_button)
        
        # Back button
        back_button = RoundedButton(
            text='–ù–ê–ó–ê–î',
            font_size='18sp',
            size_hint_y=0.1,
            color=COLORS['white']
        )
        back_button.bg_color.rgba = COLORS['gray']
        back_button.bind(on_press=self.switch_to_workout_menu)
        main_layout.add_widget(back_button)
        
        self.add_widget(main_layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        sensor_manager.set_calibration_callback(self.on_calibration_complete)
        sensor_manager.set_calibration_phase_callback(self.on_calibration_phase_change)

    def on_enter(self):
        """–ü—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –ø–ª–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏"""
        # –ù–ï –Ω–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ –°–¢–ê–†–¢
        self.sensor_update_event = Clock.schedule_interval(self.update_sensor_display, 0.5)
        self.update_calibration_display()

    def on_leave(self):
        """–ü—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        sensor_manager.stop_reading()
        if self.sensor_update_event:
            self.sensor_update_event.cancel()
            self.sensor_update_event = None
        
        if self.calibration_event:
            self.calibration_event.cancel()
            self.calibration_event = None
        
        if self.calibration_phase_event:
            self.calibration_phase_event.cancel()
            self.calibration_phase_event = None

    def update_sensor_display(self, dt):
        """Update sensor data display"""
        if sensor_manager.is_connected:
            if sensor_manager.is_reading:
                sensor_manager.read_sensor_data()
                
                if sensor_manager.is_calibrating:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                    if sensor_manager.calibration_phase == 'relax':
                        status = "üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –†–ê–°–°–õ–ê–ë–¨–¢–ï –º—ã—à—Ü—É"
                    else:
                        status = "üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –ù–ê–ü–†–Ø–ì–ò–¢–ï –º—ã—à—Ü—É"
                    
                    value_text = f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {self.calibration_progress}% | –û—Å—Ç–∞–ª–æ—Å—å: {self.calibration_phase_time_left}—Å"
                else:
                    status = "‚úÖ –ò–¥–µ—Ç –∑–∞–º–µ—Ä"
                    if sensor_manager.is_calibrated:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ %
                        calibrated_value = sensor_manager.get_calibrated_value()
                        value_text = f"–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {calibrated_value:.1f}%"
                    else:
                        value_text = f"–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {sensor_manager.current_value}"
            else:
                status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω (–æ–∂–∏–¥–∞–Ω–∏–µ)"
                value_text = "–ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–º–µ—Ä–∞"
        else:
            status = "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
            value_text = f"–ü–æ–∏—Å–∫ –¥–∞—Ç—á–∏–∫–∞ {TARGET_MAC_ADDRESS}..."
        
        self.sensor_label.text = f"{status}\n{value_text}"

    def update_calibration_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"""
        if sensor_manager.is_calibrated:
            self.calibration_label.text = f"–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: ‚úÖ\n–ë–∞–∑–æ–≤—ã–π: {sensor_manager.baseline:.1f} | –ú–∞–∫—Å: {sensor_manager.max_value:.1f}"
            self.calibration_label.color = COLORS['success']
        else:
            self.calibration_label.text = "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: ‚ùå –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            self.calibration_label.color = COLORS['danger']

    def start_calibration(self, instance):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"""
        if sensor_manager.is_connected and not sensor_manager.is_calibrating:
            self.calibration_progress = 0
            self.calibrate_button.disabled = True
            self.sensor_label.text = "üîß –ù–∞—á–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥..."
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            self.calibration_event = Clock.schedule_interval(self.update_calibration_progress, 0.5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            sensor_manager.start_calibration()

    def update_calibration_progress(self, dt):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        if sensor_manager.is_calibrating:
            self.calibration_progress = min(100, self.calibration_progress + 100/60)  # 30 —Å–µ–∫—É–Ω–¥ * 2 –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
        else:
            if self.calibration_event:
                self.calibration_event.cancel()
                self.calibration_event = None

    def on_calibration_phase_change(self, phase, duration):
        """Callback –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.calibration_phase_time_left = duration
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
        if self.calibration_phase_event:
            self.calibration_phase_event.cancel()
        
        self.calibration_phase_event = Clock.schedule_interval(self.update_phase_timer, 1)
        
        if phase == 'relax':
            print("üîß –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞–∑—É —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è")
        else:
            print("üîß –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ñ–∞–∑—É –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è")

    def update_phase_timer(self, dt):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä —Ñ–∞–∑—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        if sensor_manager.is_calibrating:
            self.calibration_phase_time_left -= 1
            if self.calibration_phase_time_left <= 0:
                self.calibration_phase_time_left = 0
                if self.calibration_phase_event:
                    self.calibration_phase_event.cancel()

    def on_calibration_complete(self, baseline, max_value):
        """Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.calibrate_button.disabled = False
        self.update_calibration_display()
        
        if self.calibration_phase_event:
            self.calibration_phase_event.cancel()
        
        self.sensor_label.text = f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ë–∞–∑–æ–≤—ã–π: {baseline:.1f} | –ú–∞–∫—Å: {max_value:.1f}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.save_calibration_data(baseline, max_value)

    def save_calibration_data(self, baseline, max_value):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            calibration_data = {
                'baseline': baseline,
                'max_value': max_value,
                'calibration_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
            
            with open('calibration_data.json', 'w', encoding='utf-8') as f:
                json.dump(calibration_data, f, indent=2, ensure_ascii=False)
            
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")

    def load_calibration_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('calibration_data.json'):
                with open('calibration_data.json', 'r', encoding='utf-8') as f:
                    calibration_data = json.load(f)
                
                sensor_manager.baseline = calibration_data.get('baseline', 0)
                sensor_manager.max_value = calibration_data.get('max_value', 0)
                sensor_manager.is_calibrated = True
                
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
        
        return False

    def start_workout(self, instance):
        """–ù–ê–ß–ê–¢–¨ –ó–ê–ú–ï–† - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏"""
        if not self.timer_running and sensor_manager.is_connected:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if not sensor_manager.is_calibrated:
                self.load_calibration_data()
            
            # –í–ö–õ–Æ–ß–ê–ï–ú –ó–ê–ú–ï–† –î–ê–ù–ù–´–• –¢–û–õ–¨–ö–û –ó–î–ï–°–¨
            sensor_manager.start_reading()
            self.timer_running = True
            self.timer_event = Clock.schedule_interval(self.update_timer, 1.0)
            print("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞! –ó–∞–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")

    def stop_workout(self, instance):
        if self.timer_running:
            self.timer_running = False
            # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–ú–ï–† –î–ê–ù–ù–´–•
            sensor_manager.stop_reading()
            if self.timer_event:
                self.timer_event.cancel()
            print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Ä–µ–º—è: {self.timer_label.text}")

    def collect_sensor_data(self):
        """Collect sensor data from BLE manager"""
        if self.timer_running and sensor_manager.is_connected and sensor_manager.current_value != 0:
            sensor_reading = {
                'timestamp': self.time_elapsed,
                'tension': sensor_manager.current_value,
                'calibrated_tension': sensor_manager.get_calibrated_value() if sensor_manager.is_calibrated else sensor_manager.current_value
            }
            
            self.sensor_data.append(sensor_reading)

    def update_timer(self, dt):
        if self.timer_running:
            self.time_elapsed += 1
            self.collect_sensor_data()
            minutes = self.time_elapsed // 60
            seconds = self.time_elapsed % 60
            self.timer_label.text = f'{minutes:02d}:{seconds:02d}'

    def save_workout(self, instance):
        if self.time_elapsed > 0 and self.sensor_data:
            minutes = self.time_elapsed // 60
            seconds = self.time_elapsed % 60
            workout_time = f'{minutes:02d}:{seconds:02d}'
            current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            tension_values = [data['tension'] for data in self.sensor_data]
            calibrated_values = [data['calibrated_tension'] for data in self.sensor_data] if sensor_manager.is_calibrated else tension_values
            
            max_tension = max(tension_values)
            avg_tension = sum(tension_values) / len(tension_values)
            min_tension = min(tension_values)
            
            max_calibrated = max(calibrated_values) if sensor_manager.is_calibrated else 0
            avg_calibrated = sum(calibrated_values) / len(calibrated_values) if sensor_manager.is_calibrated else 0
            
            workout_id = datetime.now().strftime('%Y%m%d_%H%M%S')
            workout_folder = f'workouts/workout_{workout_id}'
            os.makedirs(workout_folder, exist_ok=True)
            
            graph_path = f'{workout_folder}/graph.png'
            self.create_tension_graph(self.sensor_data, graph_path, max_tension, avg_tension, min_tension)
            
            workout_entry = {
                'id': workout_id,
                'time': workout_time,
                'date': current_date,
                'duration_seconds': self.time_elapsed,
                'sensor_data': self.sensor_data,
                'workout_folder': workout_folder,
                'graph_path': graph_path,
                'calibration_used': sensor_manager.is_calibrated,
                'calibration_baseline': sensor_manager.baseline if sensor_manager.is_calibrated else 0,
                'calibration_max': sensor_manager.max_value if sensor_manager.is_calibrated else 0,
                'metrics': {
                    'max_tension': max_tension,
                    'avg_tension': round(avg_tension, 2),
                    'min_tension': min_tension,
                    'max_calibrated': round(max_calibrated, 2) if sensor_manager.is_calibrated else 0,
                    'avg_calibrated': round(avg_calibrated, 2) if sensor_manager.is_calibrated else 0
                }
            }
            
            success = self.save_to_database(workout_entry)
            if success:
                if self.timer_running:
                    if self.timer_event:
                        self.timer_event.cancel()
                    self.timer_running = False
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–µ—Ä –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                sensor_manager.stop_reading()
                self.time_elapsed = 0
                self.sensor_data = []
                self.timer_label.text = '00:00'
                
                if 'history' in self.manager.screen_names:
                    self.manager.get_screen('history').update_history()
                
                self.sensor_label.text = f'‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–í—Ä–µ–º—è: {workout_time}'
            else:
                self.sensor_label.text = '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'
        else:
            self.sensor_label.text = '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ'

    def create_tension_graph(self, sensor_data, save_path, max_tension, avg_tension, min_tension):
        if not sensor_data:
            return
            
        import matplotlib.pyplot as plt
        
        times = [data['timestamp'] for data in sensor_data]
        tension = [data['tension'] for data in sensor_data]
        
        plt.figure(figsize=(12, 8))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –º—ã—à—Ü—ã
        plt.plot(times, tension, color='#2E86AB', linewidth=2.5, label='–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –º—ã—à—Ü—ã', alpha=0.7)
        
        # –õ–∏–Ω–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
        plt.axhline(y=max_tension, color='#FF6B6B', linestyle='--', linewidth=2, label=f'–ú–∞–∫—Å: {max_tension}')
        plt.axhline(y=avg_tension, color='#4ECDC4', linestyle='--', linewidth=2, label=f'–°—Ä: {avg_tension:.1f}')
        plt.axhline(y=min_tension, color='#45B7D1', linestyle='--', linewidth=2, label=f'–ú–∏–Ω: {min_tension}')
        
        # –¢–æ—á–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π
        max_index = tension.index(max_tension)
        min_index = tension.index(min_tension)
        
        plt.scatter(times[max_index], max_tension, color='#FF6B6B', s=100, zorder=5)
        plt.scatter(times[min_index], min_tension, color='#45B7D1', s=100, zorder=5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –º—ã—à—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏', fontsize=16, fontweight='bold', pad=20)
        plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)', fontsize=12, fontweight='bold')
        plt.ylabel('–£—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è', fontsize=12, fontweight='bold')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(save_path, dpi=100, bbox_inches='tight', facecolor='#F8F9FA')
        plt.close()

    def save_to_database(self, workout_entry):
        try:
            db_file = 'workout_database.json'
            
            if os.path.exists(db_file):
                with open(db_file, 'r', encoding='utf-8') as f:
                    database = json.load(f)
            else:
                database = {"workouts": [], "statistics": {}}
            
            database["workouts"].append(workout_entry)
            
            self.update_statistics(database)
            
            with open(db_file, 'w', encoding='utf-8') as f:
                json.dump(database, f, indent=2, ensure_ascii=False)
            
            print(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (ID: {workout_entry['id']})")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def update_statistics(self, database):
        workouts = database["workouts"]
        if workouts:
            total_workouts = len(workouts)
            total_duration = sum(w['duration_seconds'] for w in workouts)
            avg_duration = total_duration / total_workouts
            
            database["statistics"] = {
                "total_workouts": total_workouts,
                "total_duration_seconds": total_duration,
                "average_duration_seconds": round(avg_duration, 2),
                "last_update": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }

    def switch_to_workout_menu(self, instance):
        if self.timer_running:
            if self.timer_event:
                self.timer_event.cancel()
            self.timer_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω
        sensor_manager.stop_reading()
        self.manager.current = 'workout_menu'

class WorkoutDetailScreen(Screen):
    def __init__(self, **kwargs):
        super(WorkoutDetailScreen, self).__init__(**kwargs)
        Window.clearcolor = COLORS['light']
        
        self.main_layout = BoxLayout(orientation='vertical', padding=25, spacing=20)
        
        self.title_label = Label(
            text='–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', 
            font_size='28sp',
            color=COLORS['text_primary'],
            bold=True,
            size_hint_y=0.08
        )
        self.main_layout.add_widget(self.title_label)
        
        scroll_view = ScrollView(
            size_hint=(1, 0.82),
            do_scroll_x=False,
            do_scroll_y=True,
            bar_width=10,
            bar_color=COLORS['primary']
        )
        self.detail_layout = BoxLayout(orientation='vertical', size_hint_y=None, padding=10, spacing=15)
        self.detail_layout.bind(minimum_height=self.detail_layout.setter('height'))
        scroll_view.add_widget(self.detail_layout)
        self.main_layout.add_widget(scroll_view)
        
        back_button = RoundedButton(
            text='–ù–ê–ó–ê–î –ö –ò–°–¢–û–†–ò–ò',
            font_size='18sp',
            size_hint_y=0.1,
            color=COLORS['white']
        )
        back_button.bg_color.rgba = COLORS['primary']
        back_button.bind(on_press=self.go_back)
        self.main_layout.add_widget(back_button)
        
        self.add_widget(self.main_layout)
    
    def load_workout_data(self, workout):
        self.detail_layout.clear_widgets()
        
        # Basic info
        info_card = CardLayout(height=100)
        info_layout = GridLayout(cols=2, size_hint_y=1, spacing=10, padding=10)
        
        info_data = [
            ('–î–∞—Ç–∞:', workout.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
            ('–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', workout.get('time', '00:00'))
        ]
        
        for label, value in info_data:
            info_layout.add_widget(Label(
                text=label, 
                font_size='16sp', 
                color=COLORS['text_primary'],
                bold=True,
                halign='left'
            ))
            info_layout.add_widget(Label(
                text=str(value), 
                font_size='16sp', 
                color=COLORS['text_secondary'],
                halign='right'
            ))
        
        info_card.add_widget(info_layout)
        self.detail_layout.add_widget(info_card)
        
        # Workout metrics - only tension metrics
        metrics = workout.get('metrics', {})
        metrics_card = CardLayout(height=150)
        metrics_content = BoxLayout(orientation='vertical', spacing=10, padding=15)
        
        metrics_title = Label(
            text='–ú–ï–¢–†–ò–ö–ò –ù–ê–ü–†–Ø–ñ–ï–ù–ò–Ø –ú–´–®–¶–´',
            font_size='18sp',
            color=COLORS['primary'],
            bold=True,
            size_hint_y=0.2
        )
        metrics_content.add_widget(metrics_title)
        
        metrics_grid = GridLayout(cols=2, size_hint_y=0.8, spacing=15)
        
        # Calculate min tension if not present
        min_tension = metrics.get('min_tension', 0)
        if min_tension == 0 and workout.get('sensor_data'):
            tension_values = [data['tension'] for data in workout['sensor_data']]
            min_tension = min(tension_values) if tension_values else 0
        
        metrics_data = [
            ('–ú–∞–∫—Å. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ:', f"{metrics.get('max_tension', 0):.0f}"),
            ('–°—Ä. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ:', f"{metrics.get('avg_tension', 0):.1f}"),
            ('–ú–∏–Ω. –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ:', f"{min_tension:.0f}")
        ]
        
        if workout.get('calibration_used', False):
            metrics_data.extend([
                ('–ú–∞–∫—Å. –∫–∞–ª–∏–±—Ä.:', f"{metrics.get('max_calibrated', 0):.1f}%"),
                ('–°—Ä. –∫–∞–ª–∏–±—Ä.:', f"{metrics.get('avg_calibrated', 0):.1f}%")
            ])
        
        for label, value in metrics_data:
            label_widget = Label(
                text=label, 
                font_size='16sp', 
                color=COLORS['text_primary'],
                halign='left'
            )
            value_widget = Label(
                text=str(value), 
                font_size='16sp', 
                color=COLORS['secondary'],
                bold=True,
                halign='right'
            )
            metrics_grid.add_widget(label_widget)
            metrics_grid.add_widget(value_widget)
        
        metrics_content.add_widget(metrics_grid)
        metrics_card.add_widget(metrics_content)
        self.detail_layout.add_widget(metrics_card)
        
        # Workout graph
        graph_path = workout.get('graph_path', '')
        if graph_path and os.path.exists(graph_path):
            graph_card = CardLayout(height=450)
            graph_content = BoxLayout(orientation='vertical', spacing=10, padding=15)
            
            graph_title = Label(
                text='–î–ò–ù–ê–ú–ò–ö–ê –ù–ê–ü–†–Ø–ñ–ï–ù–ò–Ø –ú–´–®–¶–´',
                font_size='18sp',
                color=COLORS['primary'],
                bold=True,
                size_hint_y=0.1
            )
            graph_content.add_widget(graph_title)
            
            try:
                graph_image = Image(
                    source=graph_path,
                    size_hint=(1, 0.9),
                    allow_stretch=True,
                    keep_ratio=True
                )
                graph_content.add_widget(graph_image)
            except Exception as e:
                error_label = Label(
                    text=f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}',
                    font_size='14sp',
                    size_hint_y=0.9,
                    color=COLORS['danger']
                )
                graph_content.add_widget(error_label)
            
            graph_card.add_widget(graph_content)
            self.detail_layout.add_widget(graph_card)
        else:
            no_graph_card = CardLayout(height=80)
            no_graph_label = Label(
                text='–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                font_size='16sp',
                color=COLORS['text_secondary']
            )
            no_graph_card.add_widget(no_graph_label)
            self.detail_layout.add_widget(no_graph_card)
        
        self.detail_layout.height = self.detail_layout.minimum_height
    
    def go_back(self, instance):
        self.manager.transition = SlideTransition(direction='right')
        self.manager.current = 'history'

class WorkoutApp(App):
    def build(self):
        sm = ScreenManager(transition=SlideTransition())
        sm.add_widget(MainScreen(name='main'))
        sm.add_widget(WorkoutMenuScreen(name='workout_menu'))
        sm.add_widget(WorkoutScreen(name='workouts'))
        sm.add_widget(HistoryScreen(name='history'))
        sm.add_widget(WorkoutDetailScreen(name='workout_detail'))
        return sm
    
    def on_start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º BLE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        sensor_manager.start_ble_loop()
    
    def on_stop(self):
        """–ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –¥–∞—Ç—á–∏–∫–∞"""
        sensor_manager.disconnect_sensor()

if __name__ == '__main__':
    # Create necessary directories
    os.makedirs('workouts', exist_ok=True)
    
    print("üéØ –¶–µ–ª–µ–≤–æ–π MAC-–∞–¥—Ä–µ—Å:", TARGET_MAC_ADDRESS)
    print("üîß UUID —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", CHARACTERISTIC_UUID)
    
    # Run the app
    WorkoutApp().run()