from machine import UART, Pin
import ubluetooth
import time

# UART –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
uart = UART(1, baudrate=9600, tx=Pin(19), rx=Pin(21))

class BLEManager:
    def __init__(self):
        self.ble = ubluetooth.BLE()
        self.ble.active(True)
        self.ble.irq(self.ble_irq)
        self.connected = False
        self.setup_ble()
        
    def setup_ble(self):
        # BLE —Å–ª—É–∂–±–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
        service_uuid = '19b10000-e8f2-537e-4f6c-d104768a1214'
        char_uuid = '19b10001-e8f2-537e-4f6c-d104768a1214'
        
        service = (ubluetooth.UUID(service_uuid),)
        characteristic = (
            ubluetooth.UUID(char_uuid),
            ubluetooth.FLAG_READ | ubluetooth.FLAG_NOTIFY,
        )
        
        service_ble = (service, (characteristic,))
        services = (service_ble,)
        
        ((self.char_handle,),) = self.ble.gatts_register_services(services)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã
        name = b'EMG-Sensor'
        adv_data = bytearray()
        adv_data.extend(bytes([0x02, 0x01, 0x06]))  # Flags
        adv_data.extend(bytes([len(name) + 1, 0x09]))  # Complete local name
        adv_data.extend(name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º UUID —Å–ª—É–∂–±—ã –≤ —Ä–µ–∫–ª–∞–º—É
        service_uuid_bytes = bytes.fromhex(service_uuid.replace('-', ''))
        adv_data.extend(bytes([1 + len(service_uuid_bytes), 0x06]))
        adv_data.extend(service_uuid_bytes)
        
        self.ble.gap_advertise(100000, adv_data)  # –†–µ–∫–ª–∞–º–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100ms
        print("üöÄ BLE Server –∑–∞–ø—É—â–µ–Ω")

    def ble_irq(self, event, data):
        if event == 1:  # _IRQ_CENTRAL_CONNECTED
            self.connected = True
            print("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
        elif event == 2:  # _IRQ_CENTRAL_DISCONNECTED
            self.connected = False
            print("üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫–ª–∞–º—É
            self.ble.gap_advertise(100000, self.adv_data)
        elif event == 3:  # _IRQ_GATTS_WRITE
            print("üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")

    def send_data(self, data):
        if self.connected:
            try:
                self.ble.gatts_write(self.char_handle, data)
                self.ble.gatts_notify(0, self.char_handle, data)
                return True
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                self.connected = False
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
ble = BLEManager()
counter = 0

print("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

while True:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º UART –¥–∞–Ω–Ω—ã–µ
    if uart.any():
        data = uart.readline()
        if data:
            data = data.strip()
            print(f"üì® UART –¥–∞–Ω–Ω—ã–µ: {data}")
            ble.send_data(data)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = f"Test:{counter}".encode()
        if ble.send_data(test_data):
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_data}")
            counter += 1
    
    time.sleep(1)